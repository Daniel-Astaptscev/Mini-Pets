from tkinter import *
from tkinter import ttk

class BlockB():
    def __init__(self, notebook, position_question, position_answer):
        frame_3 = ttk.Frame(notebook)
        frame_3.pack(fill=BOTH, expand=True)
        notebook.add(frame_3, text="–í–æ–ø—Ä–æ—Å—ã: 10-16")
        self.selected = 0

        self.label_question_1 = ttk.Label(frame_3, text="üìå –í–æ–ø—Ä–æ—Å 10: –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —Ñ–∞–º–∏–ª–∏–∏ —Ç–µ—Ö, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—é –∫–æ—Ç–µ–ª—å–Ω–æ–π –æ—Ç —ç/—ç (–±–µ–∑ –∑–∞–ø—è—Ç—ã—Ö, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)?", font=("Times New Roman", 14, "bold"), wraplength=790)
        self.label_question_1.pack(**position_question)
        self.text_answer_1 = Text(frame_3, font=("Times New Roman", 14), width=75, height=2, wrap='word')
        self.text_answer_1.pack(**position_answer)

        self.label_question_2 = ttk.Label(frame_3, text="üìå –í–æ–ø—Ä–æ—Å 11: –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —Ñ–∞–º–∏–ª–∏–∏ —Ç–µ—Ö, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—é –∫–æ—Ç–µ–ª—å–Ω–æ–π –æ—Ç –≥–∞–∑–∞ (–±–µ–∑ –∑–∞–ø—è—Ç—ã—Ö, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)?", font=("Times New Roman", 14, "bold"), wraplength=800)
        self.label_question_2.pack(**position_question)
        self.text_answer_2 = Text(frame_3, font=("Times New Roman", 14), width=75, height=2, wrap='word')
        self.text_answer_2.pack(**position_answer)

        self.label_question_3 = ttk.Label(frame_3, text="üìå –í–æ–ø—Ä–æ—Å 12: –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —Ñ–∞–º–∏–ª–∏–∏ —Ç–µ—Ö, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—é –∫–æ—Ç–µ–ª—å–Ω–æ–π –æ—Ç –•–í–° (–±–µ–∑ –∑–∞–ø—è—Ç—ã—Ö, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)?", font=("Times New Roman", 14, "bold"), wraplength=800)
        self.label_question_3.pack(**position_question)
        self.entry_answer_3 = ttk.Entry(frame_3, font=("Times New Roman", 14), width=80)
        self.entry_answer_3.pack(**position_answer)

        self.label_question_4 = ttk.Label(frame_3, text="üìå –í–æ–ø—Ä–æ—Å 13: –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —Ñ–∞–º–∏–ª–∏–∏ —Ç–µ—Ö, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—é –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π –æ—Ç —Ç–µ–ø–ª–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è –∏–ª–∏ –≥–æ—Ä—è—á–µ–≥–æ –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è (–±–µ–∑ –∑–∞–ø—è—Ç—ã—Ö, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)?", font=("Times New Roman", 14, "bold"), wraplength=800)
        self.label_question_4.pack(**position_question)
        self.entry_answer_4 = ttk.Entry(frame_3, font=("Times New Roman", 14), width=80)
        self.entry_answer_4.pack(**position_answer)

        self.label_question_5 = ttk.Label(frame_3, text="üìå –í–æ–ø—Ä–æ—Å 14: –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —Ñ–∞–º–∏–ª–∏–∏ —Ç–µ—Ö, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—é –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π –æ—Ç —Ö–æ–ª–æ–¥–Ω–æ–≥–æ –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è (–±–µ–∑ –∑–∞–ø—è—Ç—ã—Ö, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)?", font=("Times New Roman", 14, "bold"), wraplength=800)
        self.label_question_5.pack(**position_question)
        self.entry_answer_5 = ttk.Entry(frame_3, font=("Times New Roman", 14), width=80)
        self.entry_answer_5.pack(**position_answer)

        self.label_question_6 = ttk.Label(frame_3, text="üìå –í–æ–ø—Ä–æ—Å 15: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ–∞–º–∏–ª–∏–∏ —Ç–µ—Ö, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—é –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π –æ—Ç —Ç–µ–ø–ª–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è –∏–ª–∏ –≥–æ—Ä—è—á–µ–≥–æ –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è –ø—Ä–∏ –±–æ–ª–µ–µ 10 –∂/–¥–æ–º–æ–≤ (–±–µ–∑ –∑–∞–ø—è—Ç—ã—Ö, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)?", font=("Times New Roman", 14, "bold"), wraplength=800)
        self.label_question_6.pack(**position_question)
        self.entry_answer_6 = ttk.Entry(frame_3, font=("Times New Roman", 14), width=50)
        self.entry_answer_6.pack(**position_answer)

        answers = ['–î–∞', '–ù–µ—Ç']
        selected_answer = StringVar()
        self.label_question_7 = ttk.Label(frame_3, text="üìå –í–æ–ø—Ä–æ—Å 16: –ò–º–µ–µ–º –ª–∏ –º—ã –ø—Ä–∞–≤–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å—Å—è –≤ —Ö–æ–¥–µ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞ –∫–∞–∫ –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏ –∏ –ñ–ö–• –ø–æ –°–∞–º–∞—Ä—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏?", font=("Times New Roman", 14, "bold"), wraplength=780)
        self.label_question_7.pack(fill="x", pady=[25, 10], padx=10)

        def select(): 
            if selected_answer.get() == '–î–∞':
                self.selected = 1
            else:
                self.selected = 0

        for item in answers:
            item_btn = ttk.Radiobutton(frame_3, text=item, variable=selected_answer, value=item, command=select)
            item_btn.pack(**position_answer)

    def check(self): 
        right_counter = 0

        check_sets = {1: {'—à–∞–º–∞–µ–≤', '–∫–æ–ø—ã–ª–æ–≤', '–±–∞—Ö–º–µ—Ç–æ–≤', '—Ç–∫–∞—á–µ–≤', '—Ç–µ–º–∏—Ä–±—É–ª–∞—Ç–æ–≤', '–º–∞–ª—ã—à–µ–≤', '–≥–∞–¥–∞–ª–∏–Ω', '–ª–µ–≤–∏–Ω', '–∞—Ç–∞–µ–≤', '–±–∞–ª–∏—Ü–∫–∞—è', '–∞–±—Ä–∞–º—á–µ–≤', '–∫–∏—Ä–ø–∏—á–µ–≤–∞'},
                      2: {'–∫–æ–ø—ã–ª–æ–≤', '–±–∞—Ö–º–µ—Ç–æ–≤', '—Ç–∫–∞—á–µ–≤', '—Ç–µ–º–∏—Ä–±—É–ª–∞—Ç–æ–≤', '–º–∞–ª—ã—à–µ–≤', '–≥–∞–¥–∞–ª–∏–Ω', '–ª–µ–≤–∏–Ω', '–∞—Ç–∞–µ–≤', '–±–∞–ª–∏—Ü–∫–∞—è', '–∞–±—Ä–∞–º—á–µ–≤', '–∫–∏—Ä–ø–∏—á–µ–≤–∞'}, 
                      3: {'—Ç–∫–∞—á–µ–≤', '—Ç–µ–º–∏—Ä–±—É–ª–∞—Ç–æ–≤', '–º–∞–ª—ã—à–µ–≤', '–≥–∞–¥–∞–ª–∏–Ω', '–ª–µ–≤–∏–Ω', '–∞—Ç–∞–µ–≤', '–±–∞–ª–∏—Ü–∫–∞—è', '–∞–±—Ä–∞–º—á–µ–≤', '–∫–∏—Ä–ø–∏—á–µ–≤–∞'},
                      4: {'—Ç–∫–∞—á–µ–≤', '—Ç–µ–º–∏—Ä–±—É–ª–∞—Ç–æ–≤', '–º–∞–ª—ã—à–µ–≤', '–∞—Ç–∞–µ–≤', '–±–∞–ª–∏—Ü–∫–∞—è', '–∞–±—Ä–∞–º—á–µ–≤', '–∫–∏—Ä–ø–∏—á–µ–≤–∞'},
                      5: {'—Å–ø–∏—Ü—ã–Ω', '–Ω–∏–∫–æ–ª–∞–µ–≤', '—Ç–∫–∞—á–µ–≤', '—Ç–µ–º–∏—Ä–±—É–ª–∞—Ç–æ–≤', '–º–∞–ª—ã—à–µ–≤', '–∞–±—Ä–∞–º—á–µ–≤', '–∫–∏—Ä–ø–∏—á–µ–≤–∞'},
                      6: {'–≥–∞–¥–∞–ª–∏–Ω', '–ª–µ–≤–∏–Ω'}}
        if set(i.lower() for i in self.text_answer_1.get("1.0", "end").split()) == check_sets[1]:
            right_counter += 1
            self.text_answer_1.configure(state='disabled')
            self.label_question_1.configure(foreground="#5c9682")
        else:
            self.text_answer_1.configure(state='disabled')
            self.label_question_1.configure(foreground="#CD5C5C")

        if set(i.lower() for i in self.text_answer_2.get("1.0", "end").split()) == check_sets[2]:
            right_counter += 1
            self.text_answer_2.configure(state='disabled')
            self.label_question_2.configure(foreground="#5c9682")
        else:
            self.text_answer_2.configure(state='disabled')
            self.label_question_2.configure(foreground="#CD5C5C")

        if set(i.lower() for i in self.entry_answer_3.get().split()) == check_sets[3]:
            right_counter += 1
            self.entry_answer_3.configure(state='disabled')
            self.label_question_3.configure(foreground="#5c9682")
        else:
            self.entry_answer_3.configure(state='disabled')
            self.label_question_3.configure(foreground="#CD5C5C")

        if set(i.lower() for i in self.entry_answer_4.get().split()) == check_sets[4]:
            right_counter += 1
            self.entry_answer_4.configure(state='disabled')
            self.label_question_4.configure(foreground="#5c9682")
        else:
            self.entry_answer_4.configure(state='disabled')
            self.label_question_4.configure(foreground="#CD5C5C")

        if set(i.lower() for i in self.entry_answer_5.get().split()) == check_sets[5]:
            right_counter += 1
            self.entry_answer_5.configure(state='disabled')
            self.label_question_5.configure(foreground="#5c9682")
        else:
            self.entry_answer_5.configure(state='disabled')
            self.label_question_5.configure(foreground='#CD5C5C')
                                            
        if set(i.lower() for i in self.entry_answer_6.get().split()) == check_sets[6]:
            right_counter += 1
            self.entry_answer_6.configure(state='disabled')
            self.label_question_6.configure(foreground="#5c9682")
        else:
            self.entry_answer_6.configure(state='disabled')
            self.label_question_6.configure(foreground="#CD5C5C")

        if self.selected == 1:
            right_counter += 1
            self.label_question_7.configure(foreground="#5c9682")
        else:
            self.label_question_7.configure(foreground="#CD5C5C")

        return right_counter
    